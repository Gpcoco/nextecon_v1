// app/api/items/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { createServerClient } from '@/utils/supabase';
import { cookies } from 'next/headers';

// GET /api/items - Fetch all items
export async function GET(request: NextRequest) {
  try {
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    // Verify user is authenticated
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError || !user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // Query items from database
    const { data: items, error } = await supabase
      .from('items')
      .select('*')
      .order('created_at', { ascending: false }); // Order by created_at descending

    if (error) {
      console.error('Supabase error:', error);
      return NextResponse.json(
        { error: error.message },
        { status: 500 }
      );
    }

    // Generate ETag for caching
    const etag = items ? `"${Buffer.from(JSON.stringify(items)).toString('base64').slice(0, 20)}"` : null;
    
    // Check if client has cached version
    const clientEtag = request.headers.get('If-None-Match');
    if (clientEtag && clientEtag === etag) {
      return new NextResponse(null, { status: 304 });
    }

    // Return response with ETag
    const response = NextResponse.json({ data: items || [] });
    if (etag) {
      response.headers.set('ETag', etag);
    }
    response.headers.set('Cache-Control', 'private, max-age=0, must-revalidate');
    
    return response;
  } catch (error) {
    console.error('API error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

// POST /api/items - Create a new item
export async function POST(request: NextRequest) {
  try {
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    // Verify user is authenticated
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError || !user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // Parse request body
    const body = await request.json();
    const { item_name, item_description, item_category, item_rarity, item_base_value } = body;

    // Validate required fields
    if (!item_name) {
      return NextResponse.json(
        { error: 'item_name is required' },
        { status: 400 }
      );
    }

    // Prepare item data - let database generate the UUID
    const itemData = {
      item_name: item_name.trim(),
      item_description: item_description?.trim() || null,
      item_category: item_category || 'common',
      item_rarity: item_rarity || 'common',
      item_base_value: item_base_value || 1,
      is_city_key: false,
      // Note: item_id will be auto-generated by the database
      // Note: created_at will be auto-generated by the database
    };

    // Insert item into database
    const { data: newItem, error: insertError } = await supabase
      .from('items')
      .insert(itemData)
      .select()
      .single();

    if (insertError) {
      console.error('Insert error:', insertError);
      return NextResponse.json(
        { error: insertError.message },
        { status: 500 }
      );
    }

    return NextResponse.json(
      { 
        data: newItem,
        message: 'Item created successfully'
      },
      { status: 201 }
    );
  } catch (error) {
    console.error('API error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

// DELETE /api/items/[id] - Delete an item
export async function DELETE(request: NextRequest) {
  try {
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    // Verify user is authenticated
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError || !user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // Extract item ID from URL
    const url = new URL(request.url);
    const pathParts = url.pathname.split('/');
    const itemId = pathParts[pathParts.length - 1];

    if (!itemId) {
      return NextResponse.json(
        { error: 'Item ID is required' },
        { status: 400 }
      );
    }

    // Delete the item
    const { error: deleteError } = await supabase
      .from('items')
      .delete()
      .eq('item_id', itemId);

    if (deleteError) {
      console.error('Delete error:', deleteError);
      return NextResponse.json(
        { error: deleteError.message },
        { status: 500 }
      );
    }

    return NextResponse.json(
      { message: 'Item deleted successfully' },
      { status: 200 }
    );
  } catch (error) {
    console.error('API error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

// PATCH /api/items/[id] - Update an item
export async function PATCH(request: NextRequest) {
  try {
    const cookieStore = cookies();
    const supabase = createServerClient(cookieStore);

    // Verify user is authenticated
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError || !user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // Extract item ID from URL
    const url = new URL(request.url);
    const pathParts = url.pathname.split('/');
    const itemId = pathParts[pathParts.length - 1];

    if (!itemId) {
      return NextResponse.json(
        { error: 'Item ID is required' },
        { status: 400 }
      );
    }

    // Parse request body
    const body = await request.json();
    const updates: any = {};

    // Only include fields that were provided
    if (body.item_name !== undefined) updates.item_name = body.item_name.trim();
    if (body.item_description !== undefined) updates.item_description = body.item_description?.trim() || null;
    if (body.item_category !== undefined) updates.item_category = body.item_category;
    if (body.item_rarity !== undefined) updates.item_rarity = body.item_rarity;
    if (body.item_base_value !== undefined) updates.item_base_value = body.item_base_value;
    if (body.is_city_key !== undefined) updates.is_city_key = body.is_city_key;

    if (Object.keys(updates).length === 0) {
      return NextResponse.json(
        { error: 'No fields to update' },
        { status: 400 }
      );
    }

    // Update the item
    const { data: updatedItem, error: updateError } = await supabase
      .from('items')
      .update(updates)
      .eq('item_id', itemId)
      .select()
      .single();

    if (updateError) {
      console.error('Update error:', updateError);
      return NextResponse.json(
        { error: updateError.message },
        { status: 500 }
      );
    }

    return NextResponse.json(
      { 
        data: updatedItem,
        message: 'Item updated successfully'
      },
      { status: 200 }
    );
  } catch (error) {
    console.error('API error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}